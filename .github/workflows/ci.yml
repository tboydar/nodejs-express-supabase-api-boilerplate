name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ecommerce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=3001
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ecommerce_test
        JWT_SECRET=test_jwt_secret_key_for_testing_only
        JWT_REFRESH_SECRET=test_jwt_refresh_secret_key_for_testing_only
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX=100
        API_PREFIX=/api/v1
        EOF

    - name: Run database migrations
      run: npm run migrate:up
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecommerce_test

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecommerce_test
        JWT_SECRET: test_jwt_secret_key_for_testing_only
        JWT_REFRESH_SECRET: test_jwt_refresh_secret_key_for_testing_only

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        echo "Building application..."
        # Add any build steps here if needed
        npm audit --audit-level moderate

    - name: Check for security vulnerabilities
      run: npm audit --audit-level high

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: ${{ secrets.DOCKER_USERNAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' && secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-demo-api:latest
          ${{ secrets.DOCKER_USERNAME }}/ecommerce-demo-api:${{ github.sha }}
      if: ${{ secrets.DOCKER_USERNAME }}